import { Octokit } from '@octokit/rest';
import { config } from '../config/env';
import { AIAnalysisService } from './ai-analysis';
import { SmartFormatter } from '../utils/formatter';
import { logger } from './logger';
import type { Commit } from '../types/github';

export interface IssueReview {
  title: string;
  body: string;
  labels: string[];
}

export class GitHubIssuesService {
  private octokit: Octokit;
  private aiAnalysisService: AIAnalysisService;
  private formatter: SmartFormatter;

  constructor() {
    this.octokit = new Octokit({
      auth: config.github.token,
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò —Å–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
    try {
      this.aiAnalysisService = new AIAnalysisService();
    } catch (error) {
      logger.warn('AI Analysis service disabled for issues - ZhipuAI API key not configured');
      this.aiAnalysisService = null as any;
    }
    
    this.formatter = new SmartFormatter();
  }

  async createCommitReviewIssue(
    username: string, 
    repo: string, 
    commit: Commit, 
    autoCreate: boolean = false
  ): Promise<IssueReview> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–∞
      let aiAnalysis;
      if (this.aiAnalysisService) {
        try {
          aiAnalysis = await this.aiAnalysisService.analyzeCommit(commit);
        } catch (error) {
          logger.warn('AI analysis failed for issue creation:', error);
          aiAnalysis = undefined;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ issue
      const title = this.generateIssueTitle(commit, aiAnalysis);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ issue —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
      const body = this.generateIssueBody(commit, aiAnalysis, autoCreate);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–µ–π–±–ª—ã
      const labels = this.generateIssueLabels(commit, aiAnalysis);

      return {
        title,
        body,
        labels
      };
    } catch (error) {
      logger.error('Error creating commit review issue:', error);
      throw error;
    }
  }

  async createIssueInRepository(
    username: string, 
    repo: string, 
    issueReview: IssueReview
  ): Promise<string> {
    try {
      const { data: issue } = await this.octokit.issues.create({
        owner: username,
        repo,
        title: issueReview.title,
        body: issueReview.body,
        labels: issueReview.labels
      });

      logger.info(`Created issue #${issue.number} in ${username}/${repo}`);
      return issue.html_url;
    } catch (error) {
      logger.error('Error creating issue in repository:', error);
      throw error;
    }
  }

  private generateIssueTitle(commit: Commit, aiAnalysis?: any): string {
    const shortMessage = (commit.commit?.message || 'No message').split('\n')[0]?.substring(0, 60) || 'No message';
    const impact = aiAnalysis?.impact || 'medium';
    
    const impactEmoji = this.getImpactEmoji(impact);
    return `${impactEmoji} Code Review: ${shortMessage}${shortMessage.length >= 60 ? '...' : ''}`;
  }

  private generateIssueBody(commit: Commit, aiAnalysis?: any, autoCreate: boolean = false): string {
    const author = commit.commit.author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';
    const date = new Date(commit.commit.author?.date || new Date()).toLocaleString('ru-RU');
    const shortSha = commit.sha.substring(0, 7);
    
    let body = `## üìù –û–±–∑–æ—Ä –∫–æ–º–º–∏—Ç–∞\n\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–∏—Ç–µ
    body += `**–ê–≤—Ç–æ—Ä:** ${author}\n`;
    body += `**–î–∞—Ç–∞:** ${date}\n`;
    body += `**–•–µ—à:** \`${shortSha}\`\n`;
    body += `**–°—Å—ã–ª–∫–∞:** [${commit.html_url}](${commit.html_url})\n\n`;
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    body += `### üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞\n\n`;
    body += `\`\`\`\n${commit.commit.message}\n\`\`\`\n\n`;
    
    // –ò–ò –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (aiAnalysis) {
      body += `## ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑\n\n`;
      body += `### üìä –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n`;
      body += `${aiAnalysis.summary}\n\n`;
      
      body += `### üéØ –í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n`;
      const impactEmoji = this.getImpactEmoji(aiAnalysis.impact);
      const categories = aiAnalysis.categories && aiAnalysis.categories.length > 0 
        ? ` ‚Ä¢ ${aiAnalysis.categories.join(', ')}` 
        : '';
      body += `${impactEmoji} **${this.getImpactText(aiAnalysis.impact)}**${categories}\n\n`;
      
      if (aiAnalysis.suggestions && aiAnalysis.suggestions.length > 0) {
        body += `### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n`;
        aiAnalysis.suggestions.forEach((suggestion: string, index: number) => {
          body += `${index + 1}. ${suggestion}\n`;
        });
        body += `\n`;
      }
      
      if (aiAnalysis.technicalDetails) {
        body += `### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏\n\n`;
        body += `${aiAnalysis.technicalDetails}\n\n`;
      }
    }
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
    if (commit.files && commit.files.length > 0) {
      body += `## üìÅ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö\n\n`;
      body += `**–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:** ${commit.files.length}\n\n`;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const totalAdditions = commit.files.reduce((sum, file) => sum + file.additions, 0);
      const totalDeletions = commit.files.reduce((sum, file) => sum + file.deletions, 0);
      body += `**–î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫:** +${totalAdditions}\n`;
      body += `**–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫:** -${totalDeletions}\n\n`;
      
      // –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∞–π–ª–∞–º
      body += `### üìã –î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n`;
      
      commit.files.forEach((file, index) => {
        const statusEmoji = this.getFileStatusEmoji(file.status);
        body += `#### ${index + 1}. ${statusEmoji} \`${file.filename}\`\n\n`;
        body += `- **–°—Ç–∞—Ç—É—Å:** ${file.status}\n`;
        body += `- **–î–æ–±–∞–≤–ª–µ–Ω–æ:** +${file.additions}\n`;
        body += `- **–£–¥–∞–ª–µ–Ω–æ:** -${file.deletions}\n`;
        body += `- **–ò–∑–º–µ–Ω–µ–Ω–∏–π:** ${file.changes}\n\n`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º patch –µ—Å–ª–∏ –µ—Å—Ç—å
        if (file.patch && file.patch.length > 0) {
          body += `\`\`\`diff\n${file.patch.substring(0, 2000)}${file.patch.length > 2000 ? '\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤)' : ''}\n\`\`\`\n\n`;
        }
      });
    }
    
    // –§—É—Ç–µ—Ä
    body += `---\n\n`;
    if (autoCreate) {
      body += `*–≠—Ç–æ—Ç issue –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–∏—Ç–æ–≤.*\n`;
    } else {
      body += `*–≠—Ç–æ—Ç issue –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π /comment.*\n`;
    }
    body += `*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /monit.*\n`;
    
    return body;
  }

  private generateIssueLabels(commit: Commit, aiAnalysis?: any): string[] {
    const labels = ['code-review', 'automated'];
    
    // –õ–µ–π–±–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    if (aiAnalysis) {
      labels.push(`impact-${aiAnalysis.impact}`);
      
      if (aiAnalysis.categories) {
        aiAnalysis.categories.forEach((category: string) => {
          labels.push(`category-${category.toLowerCase().replace(/\s+/g, '-')}`);
        });
      }
    }
    
    // –õ–µ–π–±–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (commit.files) {
      const hasNewFiles = commit.files.some(file => file.status === 'added');
      const hasDeletedFiles = commit.files.some(file => file.status === 'removed');
      const hasModifiedFiles = commit.files.some(file => file.status === 'modified');
      
      if (hasNewFiles) labels.push('new-files');
      if (hasDeletedFiles) labels.push('deleted-files');
      if (hasModifiedFiles) labels.push('modified-files');
    }
    
    return labels;
  }

  private getImpactEmoji(impact: string): string {
    switch (impact) {
      case 'low': return 'üü¢';
      case 'medium': return 'üü°';
      case 'high': return 'üî¥';
      default: return '‚ö™';
    }
  }

  private getImpactText(impact: string): string {
    switch (impact) {
      case 'low': return '–ù–∏–∑–∫–æ–µ';
      case 'medium': return '–°—Ä–µ–¥–Ω–µ–µ';
      case 'high': return '–í—ã—Å–æ–∫–æ–µ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  private getFileStatusEmoji(status: string): string {
    switch (status) {
      case 'added': return '‚ûï';
      case 'removed': return '‚ûñ';
      case 'modified': return '‚úèÔ∏è';
      case 'renamed': return 'üîÑ';
      case 'copied': return 'üìã';
      default: return 'üìÑ';
    }
  }
}
