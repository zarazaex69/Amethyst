import { Context } from 'grammy';
import { SubscriptionService } from '../services/subscription';
import { Validator } from '../utils/validator';
import { logger } from '../services/logger';

export class UnsubscribeCommand {
  private subscriptionService: SubscriptionService;

  constructor() {
    this.subscriptionService = new SubscriptionService();
  }

  async execute(ctx: Context): Promise<void> {
    try {
      const args = ctx.message?.text?.split(' ').slice(1);
      
      if (!args || args.length === 0) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub.\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unsubscribe <username> [repo]`');
        return;
      }

      const [username, repo] = args;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!username || !Validator.validateUsername(username)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub.');
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
      if (repo && !Validator.validateRepoName(repo)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.');
        return;
      }

      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
      }

      try {
        const success = await this.subscriptionService.unsubscribe(userId, username, repo);
        
        if (success) {
          const repoText = repo ? ` —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è \`${repo}\`` : '';
          await ctx.reply(
            `‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!**\n\n` +
            `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${username}\n` +
            `üìÅ **–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** ${repoText || '–≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏'}\n\n` +
            `–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–∏—Ç–∞—Ö —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`
          );

          logger.info(`User ${userId} unsubscribed from ${username}${repo ? `/${repo}` : ''}`);
        } else {
          await ctx.reply('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
      } catch (error) {
        logger.error('Unsubscribe command error:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏.');
      }

    } catch (error) {
      logger.error('Unsubscribe command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
    }
  }
}
