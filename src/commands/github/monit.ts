import { Context } from 'grammy';
import { GitHubService } from '../../services/github';
import { AIAnalysisService } from '../../services/ai-analysis';
import { SmartFormatter } from '../../utils/formatter';
import { Validator } from '../../utils/validator';
import { MESSAGES } from '../../config/constants';
import { logger } from '../../services/logger';

export class MonitCommand {
  private githubService: GitHubService;
  private aiAnalysisService: AIAnalysisService;
  private formatter: SmartFormatter;

  constructor() {
    this.githubService = new GitHubService();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò —Å–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
    try {
      this.aiAnalysisService = new AIAnalysisService();
    } catch (error) {
      logger.warn('AI Analysis service disabled - ZhipuAI API key not configured');
      this.aiAnalysisService = null as any;
    }
    
    this.formatter = new SmartFormatter();
  }

  async execute(ctx: Context): Promise<void> {
    try {
      const args = ctx.message?.text?.split(' ').slice(1);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      const validation = Validator.validateCommandArgs(args || []);
      if (!validation.isValid) {
        await ctx.reply(validation.error!);
        return;
      }

      const [username, repo] = args || [];
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      await ctx.reply(MESSAGES.LOADING);

      logger.info(`Getting commits for user: ${username}, repo: ${repo || 'all'}`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã
      const commits = await this.githubService.getLatestCommits(username!, repo);
      
      if (commits.length === 0) {
        await ctx.reply(MESSAGES.NO_COMMITS);
        return;
      }

      logger.info(`Found ${commits.length} commits`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–º–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º
      for (const commit of commits) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏
          const detailedCommit = repo 
            ? await this.githubService.getCommitWithFiles(username!, repo, commit.sha)
            : commit;

          // –ü–æ–ª—É—á–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
          let aiAnalysis;
          if (this.aiAnalysisService) {
            try {
              aiAnalysis = await this.aiAnalysisService.analyzeCommit(detailedCommit);
            } catch (error) {
              logger.warn('AI analysis failed, continuing without it:', error);
              aiAnalysis = undefined;
            }
          }

          const formattedMessage = this.formatter.formatCommit(detailedCommit, undefined, aiAnalysis);
          await ctx.reply(formattedMessage, { parse_mode: 'Markdown' });
        } catch (error) {
          logger.error('Error formatting commit:', error);
          // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
          await ctx.reply(`üìù ${commit.commit.message}\nüë§ ${commit.commit.author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'}\nüîó ${commit.html_url}`);
        }
      }

    } catch (error) {
      logger.error('Monit command error:', error);
      await ctx.reply(MESSAGES.ERROR);
    }
  }
}
