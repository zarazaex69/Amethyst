import { Context } from 'grammy';
import { GitHubService } from '../services/github';
import { GitHubIssuesService } from '../services/github-issues';
import { Validator } from '../utils/validator';
import { MESSAGES } from '../config/constants';
import { logger } from '../services/logger';

export class CommentCommand {
  private githubService: GitHubService;
  private issuesService: GitHubIssuesService;

  constructor() {
    this.githubService = new GitHubService();
    this.issuesService = new GitHubIssuesService();
  }

  async execute(ctx: Context): Promise<void> {
    try {
      const args = ctx.message?.text?.split(' ').slice(1);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      if (!args || args.length < 2) {
        await ctx.reply(
          '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.\n\n' +
          '**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/comment <username> <repo> [commit_sha]`\n\n' +
          '**–ü—Ä–∏–º–µ—Ä—ã:**\n' +
          '‚Ä¢ `/comment octocat Hello-World` - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≤—å—é –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞\n' +
          '‚Ä¢ `/comment octocat Hello-World a1b2c3d` - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–≤—å—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞'
        );
        return;
      }

      const [username, repo, commitSha] = args;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!username || !Validator.validateUsername(username)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub.');
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      if (!repo || !Validator.validateRepoName(repo)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.');
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      await ctx.reply('üîÑ –°–æ–∑–¥–∞—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ò–ò —Ä–µ–≤—å—é –∫–æ–º–º–∏—Ç–∞...');

      logger.info(`Creating comment review for ${username}/${repo}, commit: ${commitSha || 'latest'}`);

      let commit;
      
      if (commitSha) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–º–∏—Ç
        try {
          commit = await this.githubService.getCommitWithFiles(username!, repo!, commitSha!);
        } catch (error) {
          await ctx.reply(`‚ùå –ö–æ–º–º–∏—Ç \`${commitSha}\` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ \`${username}/${repo}\`.`);
          return;
        }
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        try {
          const commits = await this.githubService.getLatestCommits(username!, repo!);
          if (commits.length === 0) {
            await ctx.reply(`‚ùå –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ \`${username}/${repo}\` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤.`);
            return;
          }
          commit = commits[0];
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          if (commit) {
            commit = await this.githubService.getCommitWithFiles(username!, repo!, commit.sha);
          }
        } catch (error) {
          await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è \`${username}/${repo}\`.`);
          return;
        }
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–≤—å—é
      if (!commit) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ.');
        return;
      }

      try {
        const issueReview = await this.issuesService.createCommitReviewIssue(username!, repo!, commit, false);
        
        // –°–æ–∑–¥–∞–µ–º issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        const issueUrl = await this.issuesService.createIssueInRepository(username!, repo!, issueReview);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await ctx.reply(
          `‚úÖ **–ò–ò —Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω–æ!**\n\n` +
          `üìù **–ö–æ–º–º–∏—Ç:** \`${commit.sha.substring(0, 7)}\`\n` +
          `üìÅ **–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** \`${username}/${repo}\`\n` +
          `üîó **Issue:** [–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≤—å—é](${issueUrl})\n\n` +
          `*–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω –≤ GitHub Issues.*`
        );

        logger.info(`Successfully created comment review for ${username}/${repo}/${commit.sha}`);
      } catch (error) {
        logger.error('Error creating comment review:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–≤—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é.');
      }

    } catch (error) {
      logger.error('Comment command error:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.');
    }
  }
}
